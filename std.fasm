format ELF64 executable 3
segment readable executable
dump:
    mov  r9, -3689348814741910323
    sub     rsp, 40
    lea     rcx, [rsp+31]
.L2:
    mov     rax, rdi
    lea     r8, [rsp+32]
    mul     r9
    mov     rax, rdi
    sub     r8, rcx
    shr     rdx, 3
    lea     rsi, [rdx+rdx*4]
    add     rsi, rsi
    sub     rax, rsi
    add     eax, 48
    mov     BYTE [rcx], al
    mov     rax, rdi
    mov     rdi, rdx
    mov     rdx, rcx
    sub     rcx, 1
    cmp     rax, 9
    ja      .L2
    lea     rax, [rsp+32]
    mov     edi, 1
    sub     rdx, rax
    lea     rsi, [rsp+32+rdx]
    mov     rdx, r8
    mov     rax, 1
    syscall
    add     rsp, 40
    ret
entry main
main:
;;--PUSH_CHAR ascii(65)--;;
    push 65
;;--KW_WHILE--;;
addr_2:
;;--KW_DUP--;;
    pop rax
    push rax
    push rax
;;--PUSH_CHAR ascii(90)--;;
    push 90
;;--PUSH_INT 1--;;
    mov rax, 1
    push rax
;;--OP_ADD--;;
    pop rbx
    pop rax
    add rax, rbx
    push rax
;;--OP_LESS--;;
    mov rcx, 0
    mov rdx, 1
    pop rax
    pop rbx
    cmp rbx, rax
    cmovl rcx, rdx
    push rcx
;;--KW_DO--;;
    pop rax
    cmp rax, 0
    je addr_16
;;--KW_DUP--;;
    pop rax
    push rax
    push rax
;;--PRINT_CHAR--;;
    pop rax
    mov BYTE [rsp+31], al
    lea rsi, [rsp+31]
    mov rdi, 1
    mov rdx, 1
    mov rax, 1
    syscall
;;--PUSH_INT 1--;;
    mov rax, 1
    push rax
;;--OP_ADD--;;
    pop rbx
    pop rax
    add rax, rbx
    push rax
;;--KW_END--;;
    jmp addr_2
addr_16:
;;--KW_DROP--;;
    pop rax
    mov rax, 60
    mov rdi, 0
    syscall
    ret
segment readable writable
